<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Календарь - Домашняя бухгалтерия</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #5c6ac4;
            --primary-light: #f5f7ff;
            --secondary-color: #6b7280;
            --success-color: #10b981;
            --success-light: rgba(16, 185, 129, 0.1);
            --danger-color: #ef4444;
            --danger-light: rgba(239, 68, 68, 0.1);
            --warning-color: #f59e0b;
            --warning-light: rgba(245, 158, 11, 0.1);
            --dark-color: #111827;
            --light-color: #f9fafb;
            --border-color: #e5e7eb;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.05);
            --transition: all 0.2s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            color: var(--dark-color);
            background-color: #f3f4f6;
            line-height: 1.5;
        }

        .app-container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 1.5rem;
        }

        .header {
            background-color: white;
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--card-shadow);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .brand {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .brand-icon {
            font-size: 1.75rem;
            color: var(--primary-color);
        }

        .brand-title {
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--dark-color);
            margin: 0;
        }

        .navigation {
            display: flex;
            align-items: center;
        }

        .nav-list {
            display: flex;
            list-style: none;
            margin: 0;
            padding: 0;
            gap: 0.5rem;
        }

        .nav-item a {
            display: block;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            text-decoration: none;
            color: var(--secondary-color);
            font-weight: 500;
            transition: var(--transition);
        }

        .nav-item a:hover {
            background-color: var(--primary-light);
            color: var(--primary-color);
        }

        .nav-item a.active {
            background-color: var(--primary-color);
            color: white;
        }

        .language-selector {
            display: flex;
            margin-left: 1rem;
        }

        .language-btn {
            background: none;
            border: none;
            padding: 0.25rem;
            border-radius: 0.25rem;
            opacity: 0.6;
            transition: var(--transition);
        }

        .language-btn.active {
            opacity: 1;
            border: 2px solid var(--primary-color);
        }

        .language-btn:hover {
            opacity: 1;
            background-color: var(--primary-light);
        }

        .language-btn img {
            width: 24px;
            height: 24px;
            border-radius: 4px;
        }

        .section {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--card-shadow);
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--dark-color);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-weight: 500;
            border-radius: 0.5rem;
            padding: 0.625rem 1rem;
            transition: var(--transition);
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #4c5aa9;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #0da571;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #dc2626;
        }

        .btn-secondary {
            background-color: #e5e7eb;
            color: var(--dark-color);
        }

        .btn-secondary:hover {
            background-color: #d1d5db;
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }

        .btn-icon {
            width: 2.5rem;
            height: 2.5rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
            background-color: white;
            color: var(--secondary-color);
            border: 1px solid var(--border-color);
            transition: var(--transition);
            font-size: 1.25rem;
        }

        .btn-icon:hover {
            background-color: #f9fafb;
            color: var(--primary-color);
        }

        .calendar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.5rem;
        }

        .calendar-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        .calendar-nav {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 0.5rem;
        }

        .calendar-weekday {
            text-align: center;
            font-weight: 500;
            color: var(--secondary-color);
            padding: 0.5rem;
            font-size: 0.875rem;
        }

        .calendar-day {
            aspect-ratio: 1;
            border-radius: 0.5rem;
            border: 1px solid var(--border-color);
            padding: 0.5rem;
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            background-color: white;
        }

        .calendar-day:hover {
            border-color: var(--primary-color);
            background-color: var(--primary-light);
        }

        .calendar-day.active {
            border-color: var(--primary-color);
            background-color: var(--primary-light);
        }

        .calendar-day.other-month {
            opacity: 0.4;
        }

        .calendar-day.today {
            background-color: var(--primary-light);
            border-color: var(--primary-color);
        }

        .calendar-day-number {
            font-weight: 500;
            font-size: 0.875rem;
        }

        .calendar-day-content {
            margin-top: 0.25rem;
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
            font-size: 0.75rem;
        }

        .calendar-indicator {
            height: 0.25rem;
            border-radius: 1rem;
            margin-top: 0.25rem;
        }

        .calendar-indicator-income {
            background-color: var(--success-color);
        }

        .calendar-indicator-expense {
            background-color: var(--danger-color);
        }

        .calendar-indicator-both {
            background: linear-gradient(to right, var(--success-color) 50%, var(--danger-color) 50%);
        }

        .calendar-day-amount {
            font-size: 0.75rem;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .calendar-day-amount-income {
            color: var(--success-color);
        }

        .calendar-day-amount-expense {
            color: var(--danger-color);
        }

        .calendar-legend {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            color: var(--secondary-color);
        }

        .legend-indicator {
            width: 1rem;
            height: 0.25rem;
            border-radius: 1rem;
        }

        .legend-indicator-income {
            background-color: var(--success-color);
        }

        .legend-indicator-expense {
            background-color: var(--danger-color);
        }

        .legend-indicator-both {
            background: linear-gradient(to right, var(--success-color) 50%, var(--danger-color) 50%);
        }

        .daily-transactions {
            margin-top: 2rem;
        }

        .daily-transactions-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .daily-transactions-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark-color);
        }

        .daily-transactions-date {
            font-size: 1rem;
            color: var(--secondary-color);
        }

        .transaction-list {
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .transaction-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            transition: var(--transition);
        }

        .transaction-item:last-child {
            border-bottom: none;
        }

        .transaction-item:hover {
            background-color: var(--light-color);
        }

        .transaction-icon {
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.5rem;
            margin-right: 1rem;
            font-size: 1.25rem;
        }

        .transaction-icon-income {
            background-color: var(--success-light);
            color: var(--success-color);
        }

        .transaction-icon-expense {
            background-color: var(--danger-light);
            color: var(--danger-color);
        }

        .transaction-details {
            flex: 1;
        }

        .transaction-category {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .transaction-description {
            font-size: 0.875rem;
            color: var(--secondary-color);
        }

        .transaction-amount {
            font-weight: 600;
            text-align: right;
            white-space: nowrap;
        }

        .transaction-amount-income {
            color: var(--success-color);
        }

        .transaction-amount-expense {
            color: var(--danger-color);
        }

        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--secondary-color);
        }

        .empty-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--border-color);
        }

        .empty-text {
            font-size: 1rem;
            margin-bottom: 1.5rem;
        }

        .footer {
            text-align: center;
            font-size: 0.875rem;
            color: var(--secondary-color);
            padding: 1.5rem 0;
            border-top: 1px solid var(--border-color);
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .summary-card {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            border: 1px solid var(--border-color);
        }

        .summary-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.05);
        }

        .summary-title {
            color: var(--secondary-color);
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .summary-value {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .income-value {
            color: var(--success-color);
        }

        .expense-value {
            color: var(--danger-color);
        }

        .balance-value {
            color: var(--primary-color);
        }

        .count-value {
            color: var(--warning-color);
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .navigation {
                width: 100%;
                justify-content: space-between;
            }
        }

        @media (max-width: 768px) {
            .summary-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .calendar-grid {
                gap: 0.25rem;
            }

            .calendar-day {
                padding: 0.25rem;
            }

            .nav-list {
                flex-wrap: wrap;
            }

            .calendar-legend {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
        }

        @media (max-width: 576px) {
            .summary-grid {
                grid-template-columns: 1fr;
            }

            .calendar-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .calendar-nav {
                width: 100%;
                justify-content: space-between;
            }

            .calendar-weekday {
                font-size: 0.75rem;
            }

            .calendar-day-number {
                font-size: 0.75rem;
            }

            .calendar-day-content {
                display: none;
            }

            .calendar-indicator {
                position: absolute;
                bottom: 0.25rem;
                left: 0.25rem;
                right: 0.25rem;
            }
        }
    </style>
</head>
<body>
<div class="app-container">
    <header class="header">
        <div class="brand">
            <i class="bi bi-wallet2 brand-icon"></i>
            <h1 class="brand-title" data-lang="app_title">Домашняя бухгалтерия</h1>
        </div>
        <div class="navigation">
            <nav>
                <ul class="nav-list">
                    <li class="nav-item">
                        <a href="/v2/dashboard" data-lang="nav_dashboard">Дашборд</a>
                    </li>
                    <li class="nav-item">
                        <a href="/v2/calendar" class="active" data-lang="nav_calendar">Календарь</a>
                    </li>
                    <li class="nav-item">
                        <a href="/v2/reference/category" data-lang="nav_categories">Категории</a>
                    </li>
                    <li class="nav-item">
                        <a href="/v2" data-lang="nav_transactions">Операции</a>
                    </li>
                    <li class="nav-item">
                        <a href="/v2/auth" data-lang="nav_account">Аккаунт</a>
                    </li>
                </ul>
            </nav>
            <div class="language-selector">
                <button class="language-btn" onclick="changeLanguage('en')" title="English">
                    <img src="https://flagcdn.com/w40/gb.png" alt="English">
                </button>
                <button class="language-btn active" onclick="changeLanguage('ru')" title="Русский">
                    <img src="https://flagcdn.com/w40/ru.png" alt="Русский">
                </button>
                <button class="language-btn" onclick="changeLanguage('th')" title="ไทย">
                    <img src="https://flagcdn.com/w40/th.png" alt="ไทย">
                </button>
            </div>
        </div>
    </header>

    <!-- Summary Cards -->
    <div class="summary-grid">
        <div class="summary-card">
            <h3 class="summary-title" data-lang="summary_income">Доходы</h3>
            <p class="summary-value income-value">+75,000 ₽</p>
        </div>
        <div class="summary-card">
            <h3 class="summary-title" data-lang="summary_expenses">Расходы</h3>
            <p class="summary-value expense-value">-42,350 ₽</p>
        </div>
        <div class="summary-card">
            <h3 class="summary-title" data-lang="summary_balance">Баланс</h3>
            <p class="summary-value balance-value">32,650 ₽</p>
        </div>
        <div class="summary-card">
            <h3 class="summary-title" data-lang="summary_transactions">Операций</h3>
            <p class="summary-value count-value">24</p>
        </div>
    </div>

    <!-- Calendar Section -->
    <section class="section">
        <div class="calendar-header">
            <h2 class="calendar-title" id="currentMonthYear">Май 2025</h2>
            <div class="calendar-nav">
                <button class="btn-icon" id="prevMonth">
                    <i class="bi bi-chevron-left"></i>
                </button>
                <button class="btn btn-primary" id="currentMonth" data-lang="today">Сегодня</button>
                <button class="btn-icon" id="nextMonth">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        </div>

        <div class="calendar-grid" id="calendarWeekdays">
            <div class="calendar-weekday" data-lang="monday_short">Пн</div>
            <div class="calendar-weekday" data-lang="tuesday_short">Вт</div>
            <div class="calendar-weekday" data-lang="wednesday_short">Ср</div>
            <div class="calendar-weekday" data-lang="thursday_short">Чт</div>
            <div class="calendar-weekday" data-lang="friday_short">Пт</div>
            <div class="calendar-weekday" data-lang="saturday_short">Сб</div>
            <div class="calendar-weekday" data-lang="sunday_short">Вс</div>
        </div>

        <div class="calendar-grid" id="calendarDays">
            <!-- Calendar days will be generated by JavaScript -->
            <!-- Example of a day with both income and expense -->
            <div class="calendar-day" onclick="showDayTransactions('2025-05-15')">
                <div class="calendar-day-number">15</div>
                <div class="calendar-indicator calendar-indicator-both"></div>
                <div class="calendar-day-content">
                    <div class="calendar-day-amount calendar-day-amount-income">+45,000 ₽</div>
                    <div class="calendar-day-amount calendar-day-amount-expense">-8,500 ₽</div>
                </div>
            </div>
            <!-- Example of a day with only income -->
            <div class="calendar-day" onclick="showDayTransactions('2025-05-10')">
                <div class="calendar-day-number">10</div>
                <div class="calendar-indicator calendar-indicator-income"></div>
                <div class="calendar-day-content">
                    <div class="calendar-day-amount calendar-day-amount-income">+15,000 ₽</div>
                </div>
            </div>
            <!-- Example of a day with only expense -->
            <div class="calendar-day" onclick="showDayTransactions('2025-05-18')">
                <div class="calendar-day-number">18</div>
                <div class="calendar-indicator calendar-indicator-expense"></div>
                <div class="calendar-day-content">
                    <div class="calendar-day-amount calendar-day-amount-expense">-5,200 ₽</div>
                </div>
            </div>
        </div>

        <div class="calendar-legend">
            <div class="legend-item">
                <div class="legend-indicator legend-indicator-income"></div>
                <span data-lang="legend_income">Доходы</span>
            </div>
            <div class="legend-item">
                <div class="legend-indicator legend-indicator-expense"></div>
                <span data-lang="legend_expense">Расходы</span>
            </div>
            <div class="legend-item">
                <div class="legend-indicator legend-indicator-both"></div>
                <span data-lang="legend_both">Доходы и расходы</span>
            </div>
        </div>
    </section>

    <!-- Daily Transactions Section -->
    <section class="section daily-transactions" id="dailyTransactionsSection">
        <div class="daily-transactions-header">
            <h3 class="daily-transactions-title" data-lang="daily_transactions">Операции за день</h3>
            <div class="daily-transactions-date" id="selectedDate">15 мая 2025</div>
        </div>

        <div class="transaction-list">
            <!-- Income transaction example -->
            <div class="transaction-item">
                <div class="transaction-icon transaction-icon-income">
                    <i class="bi bi-briefcase"></i>
                </div>
                <div class="transaction-details">
                    <div class="transaction-category" data-lang="income_salary">Зарплата</div>
                    <div class="transaction-description" data-lang="salary_may">Зарплата за май</div>
                </div>
                <div class="transaction-amount transaction-amount-income">+45,000 ₽</div>
            </div>

            <!-- Expense transaction example -->
            <div class="transaction-item">
                <div class="transaction-icon transaction-icon-expense">
                    <i class="bi bi-house"></i>
                </div>
                <div class="transaction-details">
                    <div class="transaction-category" data-lang="expense_utilities">Коммунальные услуги</div>
                    <div class="transaction-description" data-lang="utilities_may">Коммунальные платежи за май</div>
                </div>
                <div class="transaction-amount transaction-amount-expense">-8,500 ₽</div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTransactionModal">
                <i class="bi bi-plus-lg"></i> <span data-lang="add_transaction">Добавить операцию</span>
            </button>
        </div>
    </section>

    <!-- Empty State for Daily Transactions (hidden by default) -->
    <section class="section daily-transactions d-none" id="emptyTransactionsSection">
        <div class="daily-transactions-header">
            <h3 class="daily-transactions-title" data-lang="daily_transactions">Операции за день</h3>
            <div class="daily-transactions-date" id="emptySelectedDate">20 мая 2025</div>
        </div>

        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-calendar-x"></i>
            </div>
            <div class="empty-text" data-lang="no_transactions">Нет операций за выбранный день</div>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTransactionModal">
                <i class="bi bi-plus-lg"></i> <span data-lang="add_transaction">Добавить операцию</span>
            </button>
        </div>
    </section>

    <!-- Модальное окно для добавления операции -->
    <div class="modal fade" id="addTransactionModal" tabindex="-1" aria-labelledby="addTransactionModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modal-header-create"
                     style="background-color: var(--success-color); color: white;">
                    <h5 class="modal-title" id="addTransactionModalLabel" data-lang="add_transaction_title">Добавление
                        новой операции</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addTransactionForm">
                        <div class="form-group">
                            <label for="transactionDate" class="form-label" data-lang="transaction_date">Дата</label>
                            <input type="date" class="form-control" id="transactionDate" required>
                        </div>
                        <div class="form-group">
                            <label for="transactionType" class="form-label" data-lang="transaction_type">Тип
                                операции</label>
                            <select class="form-select" id="transactionType" required>
                                <option value="" data-lang="select_type">Выберите тип</option>
                                <option value="income" data-lang="income">Доход</option>
                                <option value="expense" data-lang="expense">Расход</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="transactionCategory" class="form-label" data-lang="transaction_category">Категория</label>
                            <select class="form-select" id="transactionCategory" required>
                                <option value="" data-lang="select_category">Выберите категорию</option>
                                <optgroup label="Доходы" data-lang="income_group">
                                    <option value="salary" data-lang="income_salary">Зарплата</option>
                                    <option value="freelance" data-lang="income_freelance">Подработка</option>
                                    <option value="interest" data-lang="income_interest">Проценты по вкладам</option>
                                </optgroup>
                                <optgroup label="Расходы" data-lang="expense_group">
                                    <option value="groceries" data-lang="expense_groceries">Продукты</option>
                                    <option value="utilities" data-lang="expense_utilities">Коммунальные услуги</option>
                                    <option value="transport" data-lang="expense_transport">Транспорт</option>
                                    <option value="entertainment" data-lang="expense_entertainment">Развлечения</option>
                                    <option value="health" data-lang="expense_health">Здоровье</option>
                                </optgroup>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="transactionAmount" class="form-label"
                                   data-lang="transaction_amount">Сумма</label>
                            <div class="input-group">
                                <input type="number" class="form-control" id="transactionAmount" min="0" step="0.01"
                                       required>
                                <span class="input-group-text">₽</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="transactionDescription" class="form-label" data-lang="transaction_description">Описание</label>
                            <textarea class="form-control" id="transactionDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-lang="cancel">Отмена
                    </button>
                    <button type="submit" form="addTransactionForm" class="btn btn-success" data-lang="add">Добавить
                    </button>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        &copy; 2025 <span data-lang="app_title">Домашняя бухгалтерия</span>
    </footer>
</div>

<!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Локализация и календарь -->
<script>
    // Словари для разных языков
    const dictionaries = {
        ru: {
            // Общие
            app_title: "Домашняя бухгалтерия",
            nav_categories: "Категории",
            nav_transactions: "Операции",
            nav_calendar: "Календарь",
            nav_account: "Аккаунт",
            cancel: "Отмена",
            add: "Добавить",
            save: "Сохранить",
            delete: "Удалить",
            today: "Сегодня",

            // Сводка
            summary_income: "Доходы",
            summary_expenses: "Расходы",
            summary_balance: "Баланс",
            summary_transactions: "Операций",

            // Дни недели
            monday_short: "Пн",
            tuesday_short: "Вт",
            wednesday_short: "Ср",
            thursday_short: "Чт",
            friday_short: "Пт",
            saturday_short: "Сб",
            sunday_short: "Вс",

            // Месяцы
            january: "Январь",
            february: "Февраль",
            march: "Март",
            april: "Апрель",
            may: "Май",
            june: "Июнь",
            july: "Июль",
            august: "Август",
            september: "Сентябрь",
            october: "Октябрь",
            november: "Ноябрь",
            december: "Декабрь",

            // Календарь
            legend_income: "Доходы",
            legend_expense: "Расходы",
            legend_both: "Доходы и расходы",
            daily_transactions: "Операции за день",
            no_transactions: "Нет операций за выбранный день",

            // Типы операций
            income: "Доход",
            expense: "Расход",

            // Категории доходов
            income_group: "Доходы",
            income_salary: "Зарплата",
            income_freelance: "Подработка",
            income_interest: "Проценты по вкладам",

            // Категории расходов
            expense_group: "Расходы",
            expense_groceries: "Продукты",
            expense_utilities: "Коммунальные услуги",
            expense_transport: "Транспорт",
            expense_entertainment: "Развлечения",
            expense_health: "Здоровье",

            // Описания операций
            salary_may: "Зарплата за май",
            utilities_may: "Коммунальные платежи за май",

            // Модальные окна
            add_transaction: "Добавить операцию",
            add_transaction_title: "Добавление новой операции",
            transaction_date: "Дата",
            transaction_type: "Тип операции",
            transaction_category: "Категория",
            transaction_amount: "Сумма",
            transaction_description: "Описание",
            select_type: "Выберите тип",
            select_category: "Выберите категорию"
        },
        en: {
            // General
            app_title: "Home Accounting",
            nav_categories: "Categories",
            nav_transactions: "Transactions",
            nav_calendar: "Calendar",
            nav_account: "Account",
            cancel: "Cancel",
            add: "Add",
            save: "Save",
            delete: "Delete",
            today: "Today",

             // Summary
            summary_income: "Income",
            summary_expenses: "Expenses",
            summary_balance: "Balance",
            summary_transactions: "Transactions",

            // Weekdays
            monday_short: "Mon",
            tuesday_short: "Tue",
            wednesday_short: "Wed",
            thursday_short: "Thu",
            friday_short: "Fri",
            saturday_short: "Sat",
            sunday_short: "Sun",

            // Months
            january: "January",
            february: "February",
            march: "March",
            april: "April",
            may: "May",
            june: "June",
            july: "July",
            august: "August",
            september: "September",
            october: "October",
            november: "November",
            december: "December",

            // Calendar
            legend_income: "Income",
            legend_expense: "Expenses",
            legend_both: "Income and Expenses",
            daily_transactions: "Daily Transactions",
            no_transactions: "No transactions for the selected day",

            // Transaction types
            income: "Income",
            expense: "Expense",

            // Income categories
            income_group: "Income",
            income_salary: "Salary",
            income_freelance: "Freelance",
            income_interest: "Interest",

            // Expense categories
            expense_group: "Expenses",
            expense_groceries: "Groceries",
            expense_utilities: "Utilities",
            expense_transport: "Transportation",
            expense_entertainment: "Entertainment",
            expense_health: "Healthcare",

            // Transaction descriptions
            salary_may: "May salary",
            utilities_may: "May utility bills",

            // Modal windows
            add_transaction: "Add Transaction",
            add_transaction_title: "Add New Transaction",
            transaction_date: "Date",
            transaction_type: "Transaction Type",
            transaction_category: "Category",
            transaction_amount: "Amount",
            transaction_description: "Description",
            select_type: "Select type",
            select_category: "Select category"
        },
        th: {
            // ทั่วไป
            app_title: "บัญชีครัวเรือน",
            nav_categories: "หมวดหมู่",
            nav_transactions: "ธุรกรรม",
            nav_calendar: "ปฏิทิน",
            nav_account: "บัญชีผู้ใช้",
            cancel: "ยกเลิก",
            add: "เพิ่ม",
            save: "บันทึก",
            delete: "ลบ",
            today: "วันนี้",

            // สรุป
            summary_income: "รายรับ",
            summary_expenses: "รายจ่าย",
            summary_balance: "ยอดคงเหลือ",
            summary_transactions: "ธุรกรรม",

            // วันในสัปดาห์
            monday_short: "จ",
            tuesday_short: "อ",
            wednesday_short: "พ",
            thursday_short: "พฤ",
            friday_short: "ศ",
            saturday_short: "ส",
            sunday_short: "อา",

            // เดือน
            january: "มกราคม",
            february: "กุมภาพันธ์",
            march: "มีนาคม",
            april: "เมษายน",
            may: "พฤษภาคม",
            june: "มิถุนายน",
            july: "กรกฎาคม",
            august: "สิงหาคม",
            september: "กันยายน",
            october: "ตุลาคม",
            november: "พฤศจิกายน",
            december: "ธันวาคม",

            // ปฏิทิน
            legend_income: "รายรับ",
            legend_expense: "รายจ่าย",
            legend_both: "รายรับและรายจ่าย",
            daily_transactions: "ธุรกรรมรายวัน",
            no_transactions: "ไม่มีธุรกรรมสำหรับวันที่เลือก",

            // ประเภทธุรกรรม
            income: "รายรับ",
            expense: "รายจ่าย",

            // หมวดหมู่รายรับ
            income_group: "รายรับ",
            income_salary: "เงินเดือน",
            income_freelance: "งานอิสระ",
            income_interest: "ดอกเบี้ย",

            // หมวดหมู่รายจ่าย
            expense_group: "รายจ่าย",
            expense_groceries: "ของชำ",
            expense_utilities: "สาธารณูปโภค",
            expense_transport: "การเดินทาง",
            expense_entertainment: "ความบันเทิง",
            expense_health: "สุขภาพ",

            // คำอธิบายธุรกรรม
            salary_may: "เงินเดือนเดือนพฤษภาคม",
            utilities_may: "ค่าสาธารณูปโภคเดือนพฤษภาคม",

            // หน้าต่างโมดัล
            add_transaction: "เพิ่มธุรกรรม",
            add_transaction_title: "เพิ่มธุรกรรมใหม่",
            transaction_date: "วันที่",
            transaction_type: "ประเภทธุรกรรม",
            transaction_category: "หมวดหมู่",
            transaction_amount: "จำนวนเงิน",
            transaction_description: "คำอธิบาย",
            select_type: "เลือกประเภท",
            select_category: "เลือกหมวดหมู่"
        }
    };

    // Текущий язык (по умолчанию русский)
    let currentLang = 'ru';

    // Функция для изменения языка
    function changeLanguage(lang) {
        if (!dictionaries[lang]) return;

        currentLang = lang;

        // Обновляем атрибут lang у html
        document.documentElement.lang = lang;

        // Обновляем активную кнопку языка
        document.querySelectorAll('.language-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`.language-btn[onclick="changeLanguage('${lang}')"]`).classList.add('active');

        // Обновляем все элементы с атрибутом data-lang
        document.querySelectorAll('[data-lang]').forEach(element => {
            const key = element.getAttribute('data-lang');
            if (dictionaries[lang][key]) {
                element.textContent = dictionaries[lang][key];
            }
        });

        // Обновляем плейсхолдеры
        document.querySelectorAll('[data-lang-placeholder]').forEach(element => {
            const key = element.getAttribute('data-lang-placeholder');
            if (dictionaries[lang][key]) {
                element.placeholder = dictionaries[lang][key];
            }
        });

        // Обновляем опции в select
        document.querySelectorAll('option[data-lang]').forEach(option => {
            const key = option.getAttribute('data-lang');
            if (dictionaries[lang][key]) {
                option.textContent = dictionaries[lang][key];
            }
        });

        // Обновляем optgroup в select
        document.querySelectorAll('optgroup[data-lang]').forEach(optgroup => {
            const key = optgroup.getAttribute('data-lang');
            if (dictionaries[lang][key]) {
                optgroup.label = dictionaries[lang][key];
            }
        });

        // Обновляем заголовок календаря
        updateCalendarTitle();
    }

    // Данные для календаря
    let currentDate = new Date();

    // Данные о транзакциях (для демонстрации)
    const transactionsData = {
        '2025-05-15': [
            {type: 'income', category: 'salary', description: 'salary_may', amount: 45000, icon: 'bi-briefcase'},
            {type: 'expense', category: 'utilities', description: 'utilities_may', amount: 8500, icon: 'bi-house'}
        ],
        '2025-05-10': [
            {type: 'income', category: 'freelance', description: 'freelance_project', amount: 15000, icon: 'bi-laptop'}
        ],
        '2025-05-18': [
            {type: 'expense', category: 'groceries', description: 'weekly_groceries', amount: 5200, icon: 'bi-cart'}
        ],
        '2025-05-12': [
            {type: 'expense', category: 'transport', description: 'transport_taxi', amount: 2500, icon: 'bi-bus-front'}
        ],
        '2025-05-08': [
            {type: 'expense', category: 'health', description: 'health_medicine', amount: 3500, icon: 'bi-heart-pulse'}
        ],
        '2025-05-05': [
            {type: 'income', category: 'interest', description: 'bank_interest', amount: 15000, icon: 'bi-bank'}
        ]
    };

    // Функция для получения названия месяца
    function getMonthName(month) {
        const monthNames = [
            'january', 'february', 'march', 'april', 'may', 'june',
            'july', 'august', 'september', 'october', 'november', 'december'
        ];
        return dictionaries[currentLang][monthNames[month]];
    }

    // Функция для обновления заголовка календаря
    function updateCalendarTitle() {
        const monthName = getMonthName(currentDate.getMonth());
        document.getElementById('currentMonthYear').textContent = `${monthName} ${currentDate.getFullYear()}`;
    }

    // Функция для генерации календаря
    function generateCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        // Первый день месяца
        const firstDay = new Date(year, month, 1);
        // Последний день месяца
        const lastDay = new Date(year, month + 1, 0);

        // День недели первого дня месяца (0 - воскресенье, 1 - понедельник, ..., 6 - суббота)
        let firstDayOfWeek = firstDay.getDay();
        // Преобразуем для недели, начинающейся с понедельника
        firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;

        // Количество дней в месяце
        const daysInMonth = lastDay.getDate();

        // Очищаем контейнер календаря
        const calendarDays = document.getElementById('calendarDays');
        calendarDays.innerHTML = '';

        // Добавляем дни предыдущего месяца
        const prevMonth = new Date(year, month, 0);
        const daysInPrevMonth = prevMonth.getDate();

        for (let i = 0; i < firstDayOfWeek; i++) {
            const day = daysInPrevMonth - firstDayOfWeek + i + 1;
            const prevMonthDate = new Date(year, month - 1, day);
            const dateString = formatDate(prevMonthDate);

            const dayElement = createDayElement(day, dateString, true);
            calendarDays.appendChild(dayElement);
        }

        // Добавляем дни текущего месяца
        const today = new Date();
        for (let i = 1; i <= daysInMonth; i++) {
            const currentMonthDate = new Date(year, month, i);
            const dateString = formatDate(currentMonthDate);

            const isToday = today.getDate() === i &&
                today.getMonth() === month &&
                today.getFullYear() === year;

            const dayElement = createDayElement(i, dateString, false, isToday);

            // Добавляем индикаторы транзакций
            addTransactionIndicators(dayElement, dateString);

            calendarDays.appendChild(dayElement);
        }

        // Добавляем дни следующего месяца
        const totalDaysShown = firstDayOfWeek + daysInMonth;
        const daysFromNextMonth = 7 - (totalDaysShown % 7);

        if (daysFromNextMonth < 7) {
            for (let i = 1; i <= daysFromNextMonth; i++) {
                const nextMonthDate = new Date(year, month + 1, i);
                const dateString = formatDate(nextMonthDate);

                const dayElement = createDayElement(i, dateString, true);
                calendarDays.appendChild(dayElement);
            }
        }
    }

    // Функция для создания элемента дня
    function createDayElement(day, dateString, isOtherMonth = false, isToday = false) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        if (isOtherMonth) dayElement.classList.add('other-month');
        if (isToday) dayElement.classList.add('today');

        dayElement.onclick = function () {
            showDayTransactions(dateString);
        };

        const dayNumber = document.createElement('div');
        dayNumber.className = 'calendar-day-number';
        dayNumber.textContent = day;

        const dayContent = document.createElement('div');
        dayContent.className = 'calendar-day-content';

        dayElement.appendChild(dayNumber);
        dayElement.appendChild(dayContent);

        return dayElement;
    }

    // Функция для добавления индикаторов транзакций
    function addTransactionIndicators(dayElement, dateString) {
        const transactions = transactionsData[dateString];
        if (!transactions) return;

        const dayContent = dayElement.querySelector('.calendar-day-content');

        // Проверяем типы транзакций
        let hasIncome = false;
        let hasExpense = false;
        let totalIncome = 0;
        let totalExpense = 0;

        transactions.forEach(transaction => {
            if (transaction.type === 'income') {
                hasIncome = true;
                totalIncome += transaction.amount;
            } else if (transaction.type === 'expense') {
                hasExpense = true;
                totalExpense += transaction.amount;
            }
        });

        // Добавляем индикатор
        const indicator = document.createElement('div');
        indicator.className = 'calendar-indicator';

        if (hasIncome && hasExpense) {
            indicator.classList.add('calendar-indicator-both');
        } else if (hasIncome) {
            indicator.classList.add('calendar-indicator-income');
        } else if (hasExpense) {
            indicator.classList.add('calendar-indicator-expense');
        }

        dayElement.appendChild(indicator);

        // Добавляем суммы
        if (hasIncome) {
            const incomeAmount = document.createElement('div');
            incomeAmount.className = 'calendar-day-amount calendar-day-amount-income';
            incomeAmount.textContent = `+${totalIncome.toLocaleString()} ₽`;
            dayContent.appendChild(incomeAmount);
        }

        if (hasExpense) {
            const expenseAmount = document.createElement('div');
            expenseAmount.className = 'calendar-day-amount calendar-day-amount-expense';
            expenseAmount.textContent = `-${totalExpense.toLocaleString()} ₽`;
            dayContent.appendChild(expenseAmount);
        }
    }

    // Функция для форматирования даты в строку YYYY-MM-DD
    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    // Функция для форматирования даты в локализованную строку
    function formatDateLocalized(dateString) {
        const [year, month, day] = dateString.split('-');
        const date = new Date(year, month - 1, day);

        const monthName = getMonthName(date.getMonth());
        return `${day} ${monthName} ${year}`;
    }

    // Функция для отображения транзакций за выбранный день
    function showDayTransactions(dateString) {
        // Обновляем выбранную дату
        document.getElementById('selectedDate').textContent = formatDateLocalized(dateString);
        document.getElementById('emptySelectedDate').textContent = formatDateLocalized(dateString);

        // Устанавливаем дату в форме добавления транзакции
        document.getElementById('transactionDate').value = dateString;

        // Получаем транзакции за выбранный день
        const transactions = transactionsData[dateString];

        // Показываем соответствующий раздел
        if (transactions && transactions.length > 0) {
            document.getElementById('dailyTransactionsSection').classList.remove('d-none');
            document.getElementById('emptyTransactionsSection').classList.add('d-none');

            // Отображаем транзакции
            const transactionList = document.querySelector('.transaction-list');
            transactionList.innerHTML = '';

            transactions.forEach(transaction => {
                const transactionItem = document.createElement('div');
                transactionItem.className = 'transaction-item';

                const iconClass = transaction.type === 'income' ? 'transaction-icon-income' : 'transaction-icon-expense';

                transactionItem.innerHTML = `
                    <div class="transaction-icon ${iconClass}">
                        <i class="bi ${transaction.icon}"></i>
                    </div>
                    <div class="transaction-details">
                        <div class="transaction-category" data-lang="${transaction.category}">${dictionaries[currentLang][transaction.category]}</div>
                        <div class="transaction-description" data-lang="${transaction.description}">${dictionaries[currentLang][transaction.description]}</div>
                    </div>
                    <div class="transaction-amount transaction-amount-${transaction.type}">
                        ${transaction.type === 'income' ? '+' : '-'}${transaction.amount.toLocaleString()} ₽
                    </div>
                `;

                transactionList.appendChild(transactionItem);
            });
        } else {
            document.getElementById('dailyTransactionsSection').classList.add('d-none');
            document.getElementById('emptyTransactionsSection').classList.remove('d-none');
        }

        // Выделяем выбранный день в календаре
        document.querySelectorAll('.calendar-day').forEach(day => {
            day.classList.remove('active');
        });

        const selectedDay = Array.from(document.querySelectorAll('.calendar-day')).find(day => {
            return day.onclick.toString().includes(dateString);
        });

        if (selectedDay) {
            selectedDay.classList.add('active');
        }
    }

    // Функция для перехода к предыдущему месяцу
    function goToPrevMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        updateCalendarTitle();
        generateCalendar();
    }

    // Функция для перехода к следующему месяцу
    function goToNextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendarTitle();
        generateCalendar();
    }

    // Функция для перехода к текущему месяцу
    function goToCurrentMonth() {
        currentDate = new Date();
        updateCalendarTitle();
        generateCalendar();

        // Показываем транзакции за сегодня
        const today = formatDate(new Date());
        showDayTransactions(today);
    }

    // Инициализация при загрузке страницы
    document.addEventListener('DOMContentLoaded', function () {
        // Проверяем, есть ли сохраненный язык в localStorage
        const savedLang = localStorage.getItem('preferredLanguage');
        if (savedLang && dictionaries[savedLang]) {
            changeLanguage(savedLang);
        } else {
            // Если нет сохраненного языка, используем язык браузера или русский по умолчанию
            const browserLang = navigator.language.split('-')[0];
            if (dictionaries[browserLang]) {
                changeLanguage(browserLang);
            } else {
                changeLanguage('ru');
            }
        }

        // Инициализируем календарь
        updateCalendarTitle();
        generateCalendar();

        // Показываем транзакции за сегодня
        const today = formatDate(new Date());
        showDayTransactions(today);

        // Добавляем обработчики событий для навигации по календарю
        document.getElementById('prevMonth').addEventListener('click', goToPrevMonth);
        document.getElementById('nextMonth').addEventListener('click', goToNextMonth);
        document.getElementById('currentMonth').addEventListener('click', goToCurrentMonth);

        // Добавляем обработчик события для формы добавления транзакции
        document.getElementById('addTransactionForm').addEventListener('submit', function (e) {
            e.preventDefault();
            // Здесь будет логика добавления транзакции
            alert('Функция добавления транзакции будет реализована на сервере');
            document.getElementById('addTransactionModal').querySelector('.btn-close').click();
        });
    });

    // Сохраняем выбранный язык в localStorage при изменении
    const originalChangeLanguage = changeLanguage;
    changeLanguage = function (lang) {
        originalChangeLanguage(lang);
        localStorage.setItem('preferredLanguage', lang);
    };
</script>
</body>
</html>